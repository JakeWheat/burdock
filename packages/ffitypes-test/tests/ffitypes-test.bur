
use package "packages/ffitypes-test"

include ffitypes-test.ffitypes-test

check "basics":

  unmake-haskell-string(make-haskell-string("roundtrip")) is "roundtrip"

  let x :: HaskellString = 3: x end raises "type not compatible"
  unmake-haskell-string(let x :: HaskellString = make-haskell-string("test"): x end) is "test"

  is-HaskellString(1) is false
  is-HaskellString(make-haskell-string("1")) is true

  haskell-string-length(make-haskell-string("something")) is 9

end

check "basic methods":

  # equals

  make-haskell-string("a") == make-haskell-string("a") is true
  make-haskell-string("a") == make-haskell-string("b") is false

  # other comparisons

  make-haskell-string("a") < make-haskell-string("b") is true
  make-haskell-string("a") < make-haskell-string("a") is false
  make-haskell-string("a") > make-haskell-string("b") is false
  make-haskell-string("b") > make-haskell-string("a") is true
  make-haskell-string("b") >= make-haskell-string("a") is true
  make-haskell-string("a") >= make-haskell-string("b") is false
  make-haskell-string("b") <= make-haskell-string("a") is false
  make-haskell-string("a") <= make-haskell-string("b") is true
  make-haskell-string("a") >= make-haskell-string("a") is true
  make-haskell-string("a") <= make-haskell-string("a") is true

  # tostring, torepr
  # not 100% sure what these should produce exactly
  # not sure if should allow a type to implement them as separate functions
  tostring(make-haskell-string("foo")) is "foo"
  torepr(make-haskell-string("foo")) is "foo"

end

check "arith methods":
  # do a haskell-int ffi type
  # do some sanity checks on the equals, comparions, tostring, torepr

  # check it works with arithmetic

end

check "ffi member lookup":
  make-haskell-string("stuff").field is "stuff.field"
end

check "ffi value app":
  make-haskell-string("stuff")() is "app called on stuff"
  make-haskell-string("stuff")('test') is 'app called on stuff [TextV "test"]'
end
