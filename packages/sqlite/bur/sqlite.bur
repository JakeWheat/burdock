#|

low level interface to sqlite

|#


provide:
  data Value,
  type Handle,
  type ResultHandle,

  open,
  create,
  close,
  command,
  query,
  next-row,
  close-result,
  query-for-each,
  query-map,
  query-as-list

end

import from ffi:
  ffi-function
end

include option

# todo: add ffi types:
#   Int64
#   double
#   (both are 8 bytes)
#   bytestring - what to call this in burdock?
#   blob implies an extra thing - the ability to stream a single value
#   in chunks
data Value:
  | sql-number(n::Number)
  | sql-text(s::String)
  | sql-null
end

ffitype Handle = "sqlite-handle"
ffitype ResultHandle = "sqlite-result-handle"

open = ffi-function("sqlite-open")

create = ...

close = ffi-function("sqlite-close")

command = ffi-function("sqlite-command")

next-row = ffi-function("sqlite-next-row")(none,some,sql-number,_)

close-result = ffi-function("sqlite-close-result")

query = ffi-function("sqlite-query")

fun query-for-each(h, qry, ps, f):
  rs = query(h, qry, ps)
  fun lp():
    v = next-row(rs)
    cases v:
      | some(r) =>
          f(r)
          lp()
      | none => nothing
    end
  end
  lp()
  close-result(rs)
end

fun query-map(h, qry, ps, f):
  rs = query(h, qry, ps)
  fun lp():
    v = next-row(rs)
    cases v:
      | some(r) =>
          link(f(r), lp())
      | none => empty
    end
  end
  ret = lp()
  close-result(rs)
  ret
end

fun query-as-list(h, qry, ps):
  query-map(h, qry, ps, {(x): x})
end
