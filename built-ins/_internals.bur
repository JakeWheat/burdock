
#|

this is the code which is unconditionally loaded in every handle to
run any burdock

the system first loads the _bootstrap module, which creates the
minimum bits that are needed for the language itself

then parts of the system which should always be loaded, even when you
don't load the globals module, go here

todo: factor out bits to the correct built-in module that don't need
to be necessarily loaded=
   
users should import stuff the want to use via the globals or other
module which reexports these

|#

include _bootstrap

raise = get-ffi-value("raise")
haskell-error = get-ffi-value("haskell-error")

get-call-stack = get-ffi-value("get-call-stack")
format-call-stack = get-ffi-value("format-call-stack")

# debugging and troubleshooting support

load-module = get-ffi-value("load-module")
show-handle-state = get-ffi-value("show-handle-state")

# user stuff that's also used in bootstrapping the system

is-tuple = get-ffi-value("is-tuple")
is-record = get-ffi-value("is-record")

print = get-ffi-value("print")

torepr = get-ffi-value("torepr")

catch-as-either = get-ffi-value("catch-as-either")

data Either:
  | left(v)
  | right(v)
end

data List<a>:
  | link(first :: a, rest :: List<a>)
  | empty
end

# if tests are run, automatically print the results
# this is used to disable the printing when you are getting the test
# results out and printing them or using them differently yourself
# it's used by the tasty testing adaptor
var auto-print-test-results = true
# the 'api' is to use the function, don't read or write the var directly
fun set-auto-print-test-results(b):
  auto-print-test-results := b
end
# set whether tests should be run or ignored
var auto-run-tests = false
# the 'api' is to use the function, don't read or write the var directly
fun set-auto-run-tests(b):
  auto-run-tests := b
end

