
#|

   The following list things are part of the globals module:

   List
   empty
   link
   is-empty
   is-link
   [list: ... ]

   todo: make sure when support use context, and these are not imported from the context,
   that you get them all if you import this lists module

   functions todo: 
   take
   drop
   
   length
   get
   set
   sort
   sort-by
   join-str
   range
   range-by
   repeat
   distinct
   filter
   partition
   find
   split-at
   last
   push
   append
   any
   all
   all2
   map
   map2
   map3
   map4
   map_n
   map2_n
   map3_n
   map4_n
   each
   each2
   each3
   each4
   each_n
   each2_n
   each3_n
   each4_n
   fold-while
   foldr
   foldl
   fold2
   fold3
   fold4
   fold_n
   member
   member-with
   reverse
   remove
   shuffle
   
  
   

|#

provide:
  length,
  get,
  set,
  reverse,
  append,
  map,
  fold,
  foldl,
  foldr
end


fun length(l :: List):
  cases l:
    | empty => 0
    | link(f, r) => 1 + length(r)
  end
where:
  length([list:]) is 0
  length([list:1]) is 1
  length([list:2,1]) is 2
end

fun get<a>(l :: List<a>, i :: Number) -> a:
  when i < 0:
    raise("invalid argument")
  end
  cases l:
    | empty => raise("too large")
    | link(f, r) =>
      if i == 0: f
      else:
        get(r, i - 1)
      end
  end
end

fun set<a>(l :: List<a>, i :: Number, v :: a) -> List<a>:
  when i < 0:
    raise("invalid argument")
  end
  cases l:
    | empty => raise("too large")
    | link(f, r) =>
      if i == 0: link(v,r)
      else:
        link(f, set(r, i - 1, v))
      end
  end
end

fun reverse<e>(l :: List<e>) -> List<e>:
  fun rev(xsa, a):
    cases xsa:
      | empty => a
      | link(x,xs) => rev(xs, link(x,a))
    end
  end
  rev(l,empty)
where:
  reverse([list:]) is [list:]
  reverse([list: 1]) is [list: 1]
  reverse([list: 1,2]) is [list: 2,1]
  reverse([list: 1,2,3]) is [list: 3,2,1]
end

fun append<a>(xs :: List<a>, ys :: List<a>) -> List<a>:
  cases xs:
    | empty => ys
    | link(x, xsa) => link(x, append(xsa,ys))
  end
where:
  append([list:], [list:]) is [list:]
  append([list:1], [list:]) is [list:1]
  append([list:], [list:1]) is [list:1]
  append([list:1,2,3], [list: 4,5,6]) is [list:1,2,3,4,5,6]
end


#map :: (a -> b, List<a>) -> List<b>
fun map<a,b>(f :: (a -> b), lst :: List<a>) -> List<b>:
  cases lst:
    | empty => empty
    | link(a,az) => link(f(a), map(f,az))
  end
where:
  #map(num-tostring, [list: 1, 2]) is [list: "1", "2"]
  map(lam(x): x + 1 end, [list: 1, 2]) is [list: 2, 3]
end


#fold :: (f :: (Base, Elt -> Base), base :: Base, lst :: List<Elt>) -> Base

# the f in foldl and foldr is backwards compared to haskell ...

fun foldl(f, base, lst):
  cases lst:
    | empty => base
    | link(h,t) => foldl(f, f(base,h), t)
  end
end

fold = foldl

check:
  fold((lam(acc, elt): acc + elt end), 0, [list: 3, 2, 1]) is 6
  fold((lam(acc, elt): acc + elt end), 10, [list: 3, 2, 1]) is 16

  fun combine(acc, elt) -> String:
    tostring(elt) + " - " + acc
  end
  fold(combine, "END", [list: 3, 2, 1]) is "1 - 2 - 3 - END"
  fold(combine, "END", empty) is "END"
end

fun foldr(f, base, lst):
  cases lst:
    | empty => base
    | link(h,t) => f(foldr(f,base,t), h)
  end
end

check:
  foldr((lam(acc, elt): acc + elt end), 0, [list: 3, 2, 1]) is 6
  foldr((lam(acc, elt): acc + elt end), 10, [list: 3, 2, 1]) is 16
  fun combine(acc, elt) -> String:
    tostring(elt) + " - " + acc
  end
  foldr(combine, "END", [list: 3, 2, 1]) is "3 - 2 - 1 - END"
  foldr(combine, "END", empty) is "END"
end
