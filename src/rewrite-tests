
# dsl for testing the rewriter
# decided that it was simplest to test the rewriter by creating a number
# of files, then checking the final file rewrites to a particular syntax
# or gives some particular errors

##############################################################################

# check the absolute basics without modules

# these are things that the renamer should pass through without
# changing or producing errors

Test: empty
Script:
Result:

Test: simple decl
Script:
a = 3
a
Result:
a = 3
a

Test: update var
Script:
var a = 3
a := 4
Result:
var a = 3
a := 4

Test: simple type
Script:
data Test: test(a) end
a = test(3)
assert-type-compat(a :: Test)
Result:
data Test: test(a) end
a = test(3)
assert-type-compat(a :: _type-Test)

Test: shadow
Script:
a = 3
shadow a = 4
Result:
a = 3
shadow a = 4

Test: unneeded shadow
# by default, want this to be OK, it's not perfect for finished code
# but one of the long list of things that's super annoying to deal
# with in the middle of writing or debugging code if it's an error
Script:
shadow a = 4
Result:
shadow a = 4

####

Test: match variants

Script:
data Test:
  | ctor1
  | ctor2(a,b)
end
a = ctor1
cases a:
  # can't test this directly at the moment because of a parsing/test issue
  # | ctor1 => 1
  | ctor2(x,y) => 2
  | regular-bind => 3
end

Result:
data Test:
  | ctor1
  | ctor2(a,b)
end
a = ctor1
cases a:
  # can't test this directly at the moment because of a parsing/test issue
  # | _variant-ctor1 => 1
  | _variant-ctor2(x,y) => 2
  | regular-bind => 3
end

####

Test: data decl extras

Script:
data Test:
  | ctor(a,b)
end
a = 1
is-Test(a)
is-ctor(a)
b = ctor(1,2)

Result:
data Test:
  | ctor(a,b)
end
a = 1
is-Test(a)
is-ctor(a)
b = ctor(1,2)

######################################

# testing basic anomalies without modules

Test: unrecognised iden
Script:
a
Errors:
unrecognised-identifier([list: "a"])

Test: two errors
Script:
a
b
Errors:
unrecognised-identifier([list: "a"])
unrecognised-identifier([list: "b"])

# Test: unrecognised type
# Script:
# a = 3
# assert-type-compat(a :: my-type)
# Errors:
# unrecognised-identifier([list: "my-type"])

# Test: write to non var
# Script:
# a = 4
# a := 5
# Errors:
# assign-to-non-var([list: "a"])

# Test: write to unrecognised var
# Script:
# a := 5
# Errors:
# unrecognised-identifier([list: "a"])

# Test: unrecognised variant
# Script:
# a = 3
# cases a:
#   | my-variant(b) => 1
# end
# Errors:
# unrecognised-identifier([list: "my-variant"])

# Test: iden as type
# Script:
# a = 1
# not-a-type = 3
# assert-type-compat(a :: not-a-type)
# Errors:
# non-type-used-as-type([list: "not-a-type"])

# Test: use type as iden
# Script:
# data Test: test(a) end
# a = Test
# Errors:
# type-use-in-expr([list: "Test"])

# Test: shadow without shadow keyword
# Script:
# a = 3
# a = 4
# Errors:
# identifier-redefined([list: "a"])

# Test: no shadow in pattern match bind
# Script:
# a = 3
# b = 4
# cases a:
#   | b => 1
# end
# Errors:
# identifier-redefined([list: "b"])

# Test: no shadow in pattern match bind variant arg
# Script:
# data Test:
#   | ctor1
#   | ctor2(a,b)
# end
# a = ctor
# b = 1
# cases a:
#   | ctor1 => 1
#   | ctor2(b,c) => 2
#   | regular-bind => 3
# end
# Errors:
# identifier-redefined([list: "b"])

# Test: no arg ctor given args in pattern
# Script:
# data Test:
#   | ctor1
#   | ctor2(a,b)
# end
# a = ctor
# b = 1
# cases a:
#   | ctor1(a) => 1
# end
# Errors:
# variant-pattern-incorrect-num-args([list: "ctor1", 1, 0])

# Test: variant given wrong number of args in pattern
# Script:
# data Test:
#   | ctor1
#   | ctor2(a,b)
# end
# a = ctor
# b = 1
# cases a:
#   | ctor2(b,c,d) => 2
# end
# cases a:
#   | ctor2 => 2
# end
# Errors:
# variant-pattern-incorrect-num-args([list: "ctor1", 2, 3])
# variant-pattern-incorrect-num-args([list: "ctor1", 2, 0])

# no arg bind fail if shadow
# no arg ctor pattern given args
# ctor pattern with wrong number of args

##############################################################################

# temp? bootstrap import for simplest scripts

Test: trivial module
Script:
provide: *, type *, data * end
a = 3
Result:
a = 3
_interpreter.make-module({a:a})

Test: imported
File: imported
provide: *, type *, data * end
a = 3
Script:
import file("imported") as i
i.a
Result:
import file("imported") as _module-file-imported
_module-file-imported.a

Test: include
File: included
provide: *, type *, data * end
a = 3
Script:
include file("included")
a
Result:
import file("included") as _module-file-included
_module-file-included.a

Test: provide from
File: imported
provide: *, type *, data * end
a = 3
File: provide-from
import file("imported") as imported
provide from imported: *, type *, data * end
Script:
include file("provide-from")
a
Result:
import file("provide-from") as _module-file-provide-from
_module-file-provide-from.a

Test: provide from2
File: imported1
provide: *, type *, data * end
a = 3
File: imported2
provide: *, type *, data * end
b = 3
Script:
import file("imported1") as imported1
import file("imported2") as imported2
provide from imported1: *, type *, data * end
provide from imported2: *, type *, data * end
Result:
import file("imported1") as _module-file-imported1
import file("imported2") as _module-file-imported2
_interpreter.make-module(
 {a: _module-file-imported1.a,
  b: _module-file-imported2.b})


##############################################################################

# basic tests for simplest import
# iden, var assign, use type, use pattern

# use stuff that comes with data

# special case: rename variant


##############################################################################

# provide items

##############################################################################

# rest of prelude statements

##############################################################################

# edge cases

# error iden redefined in two different prelude statements

# identifier only gives ambiguous error if used, if max one of the imports
# is a non *

# ok: same iden imported from two different modules, but ultimately has the
# same original source


##############################################################################

# body anomaly testing

##############################################################################

# prelude anomaly testing
