
check "plus on numbers":
  #1._plus(2) is 3
  1 + 2 is 3
  #3 + 4 is 7
end

check "simple let and let decl":

  let a = 3: a + 1 end is 4


  a = 3
  a + 1 is 4

  let shadow a = 4: a + 1 end is 5
  a is 3

  #ffi-demo(5) is 10
end

check "simple lambdas":
  f = lam(x): x + 1 end
  f(1) is 2

  a = 3
  g = lam(x): x + a end
  g(2) is 5

  h = lam(x):
        lam(y): x + y end
      end

  b = h(4)
  b(5) is 9

end

check "bits pt 1":
  x = "hello"
  #print(x)
  y = " world"
  x + y is "hello world"

  (3) is 3
end

check "bits pt 2":
  (3 + 4) * 5 is 35

  x = true
  x is true
  y = false
  y is false

  if x: 1 else: 2 end is 1
  if y: 1 else: 2 end is 2

  block:
    c = 3
    c is 3
  end

end

check "simple record":
  x = 33
  a = {a: "one", b : 2, c : x }
  a.a is "one"
  a.b is 2
  a.c is 33
end


check "temp prelude with either":

  right(5) is right(5)
  left('b') is left('b')

end

data Tmp:
  | myctor
end

check "torepr":
  #print(torepr(true))
  torepr(true) is "true"
  torepr("test") is '"test"'
  tostring("test") is "test"
  torepr(5) is "5"
  torepr([list:]) is "[list: ]"
  torepr([list: 1, true]) is "[list: 1, true]"
  torepr(myctor) is "myctor"
  torepr(left(5)) is "left(5)"
  torepr(nothing) is "nothing"
  
  torepr(method(self): self.x end) is "<method>"
  torepr(lam(): true end) is "<function>"
end

