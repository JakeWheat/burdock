
# todo: fix text, bool to have compare

check:
  1 is 1
  "test" is "test"
  1 is-not "test"
  true is true
  true is-not false
end

check:
  if 1 == 2: 3 else: 4 end is 4
end

check:
  a = 3
  a is 3
  a is-not 4
end

check:

  1 + 1 is 2
  b = 1
  f = lam(a): a + b end
  f(3) is 4

end

check:
  var a = 5

  a is 5

  a := 7
  a is 7

  var b = 1
  set_it = lam(c): 
     b := c
  end
  b is 1
  set_it(2)
  b is 2

end

check:
  rec fact = lam(n): if n <= 1: 1 else: n * fact(n - 1) end end
  fact(1) is 1
  fact(5) is 120

end

check:

  rec addeven = lam(x): if x == 0: 0 else: x + addodd(x - 1) end end
  rec addodd = lam(x): if x == 0: 0 else: x + addeven(x - 1) end end
  addeven(6) is 21

end

check:

  fun addeven(x): if x == 0: 0 else: x + addodd(x - 1) end end
  fun addodd(x): if x == 0: 0 else: x + addeven(x - 1) end end
  addeven(6) is 21

end

check:

  a = 6
  block:
    shadow  a = 5
    a - 1
  end is 4

  a is 6

  block:
    when false:
      raise("bye")
    end
    5
  end is 5

  (3 + 4) * 5 is 35

end

check:

  data MyDat:
    | ctor1
    | ctor2(a,b)
  end

  data Other:
    | other1(a)
  end

  x = ctor1
  y = ctor2(2,5)

  y.a is 2
  y.b is 5

  is-MyDat(ctor1) is true
  is-Other(ctor1) is false

  is-ctor1(ctor1) is true
  is-ctor2(ctor1) is false

  cases x:
    | ctor2(a,b) => false
    | ctor1 => true
  end is true

  cases y:
    | ctor1 => false
    | ctor2(c,d) => d
  end is 5

  # temp work around before variant equals implemented
  zz = cases y:
    | yy => yy
  end
  zz.a is 2
  zz.b is 5

  _bootstrap.variants-equal(_bootstrap.make-haskell-list("a", "b"), ctor2(1,2), ctor2(1,2)) is true
  _bootstrap.variants-equal(_bootstrap.make-haskell-list("a", "b"), ctor2(1,2), ctor2(2,1)) is false
  _bootstrap.variants-equal(_bootstrap.make-haskell-list(), ctor1, ctor1) is true

  ctor1 is ctor1
  ctor2(2,5) is ctor2(2,5)
  ctor2(2,5)._torepr() is "ctor2(2,5)"
  ctor1._torepr() is "ctor1"

  2 <> 3 is true

end

check:

  a = {x:3, y: 4}
  a.x is 3
  a.y is 4

end

check:

  print(_bootstrap-either)
  a = _bootstrap-either.left(1)
  print(a)

  x = link(1, link(3, empty))
  print(x)

end

check:

  [list:] is empty
  [list:1] is link(1,empty)

end

check:
  weird2 = {
    make : lam(args):
      cases args:
        | empty => "nothing at all"
        | link(a,empty) => "just " + tostring(a)
        | link(a,link(b, empty)) => tostring(a) + " and " + tostring(b)
        | link(a,link(b, link(c,empty))) => "several things"
        | link(a,link(b, link(c,link(d,empty)))) => "four things"
        | link(a,link(b, link(c,link(d,link(e,empty))))) => "five things"
        | _ => "too many things"
      end
    end 
    }
  [weird2: ] is "nothing at all"
  [weird2: true] is "just true"
  [weird2: 5, 6.24] is "5 and 6.24"
  [weird2: true, false, 5] is "several things"
  [weird2: 1, 2, 3, 4] is "four things"
  [weird2: 1, 1, 1, 1, 1] is "five things"
  [weird2: "a", "b", "c", true, false, 5] is "too many things"
end


check:
  right = _bootstrap-either.right
  left = _bootstrap-either.left
  run-task("ok") is right("ok")
  run-task(raise("burdock")) is left("burdock")
  # not currently working - needs the strictness pass
  #run-task(_bootstrap.haskell-error("haskell")) is left("haskell")
end

check:

  a = {1;2}
  a.{0} is 1
  a.{1} is 2

  a is {1;2}
  a is-not {2;1}

  a._torepr() is "{1;2}"

end

check:

  a = {a:1, b:2}
  a.a is 1
  a.b is 2
  a is {a:1, b:2}
  a is {b:2, a:1}
  a is-not {b:1, a:2}
  a is-not {a:1, b:1}

  a._torepr() is "{a:1,b:2}"

  #is-record({}) is true

end
