

import python("string") as pystring
import haskell("python") as python

# print("burdock")
# print(pystring.printable)
# print("done")|#


check:
  pystring.octdigits is "01234567"

  # test pyblock + auto conversions
  python.py-block("'test' + ' stuff'") is "test stuff"

  python.py-block-with-binds("'test ' + a", {a:'aval'}) is "test aval"
  python.py-block-with-binds("type(a).__name__", {a:'aval'}) is "str"

  python.py-block-with-binds("not a", {a:true}) is false
  python.py-block-with-binds("type(a).__name__", {a:true}) is "bool"

  python.py-block-with-binds("a == None", {a:nothing}) is true
  python.py-block-with-binds("a == None", {a:1}) is false
  python.py-block-with-binds("type(a).__name__", {a:nothing}) is "NoneType"


  python.py-block-with-binds("2 + a", {a:1}) is 3
  python.py-block-with-binds("type(a).__name__", {a:1}) is "int"

  python.py-block-with-binds("2.0 + a", {a:1.0}) is 3.0
  python.py-block-with-binds("type(a).__name__", {a:2.3}) is "float"

  # call a function in a python module
  pystring.capwords("hello python") is "Hello Python"


  # iterate through a python iterable, and lists
  python.py-for(lam(x): x + 1 end, python.py-block("iter([1, 2, 3, 4])"))
    is [list: 2,3,4,5]

  python.py-for(lam(x): x + 1 end, python.py-block("[1, 2, 3, 4]"))
    is [list: 2,3,4,5]

  python.py-for(lam(x): x + 1 end, [list:1,2,3,4])
    is [list: 2,3,4,5]


end


