

check "get call stack":

  f = lam(x): get-call-stack().length() is x end

  g = lam(x): f(x) end

  h = lam(x): g(x) end


  l = get-call-stack().length()
  f(l + 1)
  get-call-stack().length() is l
  g(l + 2)
  get-call-stack().length() is l
  h(l + 3)
  get-call-stack().length() is l

end

my-length = lam(x):
    cases x:
      | left(y) => y.callstack.length()
    end
  end

check "call stack and exceptions":

  f = lam(): raise("bollocks") end

  g = lam(): f() end

  h = lam(): g() end
 

  l = get-call-stack().length()
  #|print(l)
  x = run-task-cs(f())
  print(x)
  print(my-length(x))

|#

  #print(my-length(run-task-cs(f())))
  my-length(run-task-cs(f())) is l + 1
  get-call-stack().length() is l

  my-length(run-task-cs(g())) is l + 2
  get-call-stack().length() is l

  my-length(run-task-cs(h())) is l + 3
  get-call-stack().length() is l
end

check "temp callstack with async exceptions":

  f = lam(): sleep(5) end

  g = lam(): f() end

  h = lam(): g() end

  #x = run-task-cs-async(block:
  #    spawn-sleep-throw-to(0.1)
  #    h()
  #  end)
  #print(x)
  #print(_record_torepr)

  run-it = lam(my-f):
      run-task-cs-async(block:
        spawn-sleep-throw-to(0.1)
        #print(11)
        my-f()
        #print(21)
      end)
    end
  l = get-call-stack().length()

  # todo: need to work on exactly how long the callstack should be
  # and what entries should be in it. Definitely run-task and variations
  # should be
  my-length(run-it(f)) is l + 2
  get-call-stack().length() is l
  my-length(run-it(g)) is l + 3
  get-call-stack().length() is l
  my-length(run-it(h)) is l + 4
  get-call-stack().length() is l

  #x = run-it(f)
  #print(_record_torepr)
  #x = run-it(f)
  #print(_record_torepr)
  #print(1)
  #print(x)

end
