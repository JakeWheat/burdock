
include testing

import from _internals:
  haskell-show
end

# check run-test isolation
import file("trivial-var-module.bur") as M

check:
  run-tests("src/burdock/tests/demo-test.bur")
    is [list:
        module-check-results("./src/burdock/tests/demo-test.bur",
        [list:
         check-results("check-block-0",
                      ([list: test-pass("1 + 2 is 3")]))])]
end

check:
  run-tests("src/burdock/tests/demo-test1.bur").first.mcheck-results
    is [list:
        check-results("check-block-0",
                      ([list: test-pass("2 + 3 is 5")]))]
end

check:
  M.a is 1
  M.a := 2
  M.a is 2
  run-tests("src/burdock/tests/test-var-isolation1.bur").first.mcheck-results
    is [list:
          check-results("check-block-0",
                        ([list: test-pass("M.a is 1"), test-pass("M.a is 3")]))]
  M.a is 2
  run-tests("src/burdock/tests/test-var-isolation2.bur").first.mcheck-results
    is [list:
          check-results("check-block-0",
                        ([list: test-pass("M.a is 1"), test-pass("M.a is 4")]))]
  M.a is 2
end

check:

    run-tests("src/burdock/tests/imported-tests.bur")
      is [list:
          module-check-results("./src/burdock/tests/four-tests.bur",
          [list:
           check-results("check-block-0",
                        ([list: test-pass("1 is 1"), test-pass("2 is 2")])),
           check-results("check-block-1",
                        ([list: test-pass("3 is 3"), test-pass("4 is 4")]))
           ]),
          module-check-results("./src/burdock/tests/imported-tests.bur",
          [list:
           check-results("check-block-0",
                        ([list: test-pass("1 + 2 is 3")]))])]

end

check "format-test-results":

  format-test-results(run-tests("src/burdock/tests/imported-tests.bur"), false)
    is 
```Module: ./src/burdock/tests/four-tests.bur
------------------------------------------
Check block: check-block-0
  test (1 is 1): OK
  test (2 is 2): OK
  2/2 tests passed in check block: check-block-0

Check block: check-block-1
  test (3 is 3): OK
  test (4 is 4): OK
  2/2 tests passed in check block: check-block-1
4/4 tests passed in module: ./src/burdock/tests/four-tests.bur

Module: ./src/burdock/tests/imported-tests.bur
----------------------------------------------
Check block: check-block-0
  test (1 + 2 is 3): OK
  1/1 tests passed in check block: check-block-0
1/1 tests passed in module: ./src/burdock/tests/imported-tests.bur
5/5 tests passed in all modules```

  format-test-results(run-tests-string("xx", ```
check:
  1 + 1 is 3
end
```), false) is ```Module: xx
----------
Check block: check-block-0
  test (1 + 1 is 3): failed, reason:
    2
    !=
    3

  0/1 tests passed in check block: check-block-0
0/1 tests passed in module: xx
0/1 tests passed in all modules```


end



check "run-tests-string":

  run-tests-string("tests-in-string",```
check:
  3 + 5 is 8
end

```)
    is [list:
        module-check-results("tests-in-string",
        [list:
         check-results("check-block-0",
                      ([list: test-pass("3 + 5 is 8")]))])]

  run-tests-string("tests-in-string",```
check:
  3 + 5 is 9
end
```)
    is [list:
        module-check-results("tests-in-string",
        [list:
         check-results("check-block-0",
                      ([list: test-fail("3 + 5 is 9", ```8
!=
9```)]))])]

end

check "has-test-failures":
    has-test-failures([list:
        module-check-results("tests-in-string",
        [list:
         check-results("check-block-0",
                      ([list: test-pass("3 + 5 is 8")]))])])
      is false


    has-test-failures([list:
        module-check-results("tests-in-string",
        [list:
         check-results("check-block-0",
                      ([list: test-fail("3 + 5 is 9", "")]))])])
      is true

    has-test-failures([list:
        module-check-results("tests-in-string",
        [list:
         check-results("check-block-0",
                      ([list: test-pass("3 + 5 is 9")])),
         check-results("check-block-0",
                      ([list: test-pass("3 + 5 is 9"),
                        test-fail("3 + 5 is 9", "")]))])])
      is true

end

check:

  # show failure when a check block raises

  # show failure when a module raises

end

check:

  # simplest predicate stuff right now:
  # support the module part of the predicate
  # so can implement testing either only the directly referenced modules
  # or all user modules

end

check:

  # todo:
#|

there's a run-tests module, this is also used by the burdock
interpreter to run tests
you can call run-tests directly to create a test suite, just using
command line args
you can create a test suite by creating a trivial file with a test opts
that you pass to the testing
this will also parse command line options to update the test opts

|#


  # parse command line args
  #|
    hide/show progress-log (only 1)
    hide/show results (only 1)
    module filter (stack)
    check block filter (stack)
    test predicate filter (stack)
    test all modules filter (only 1)
    test sources (stack)
    test sources globs (stack)

    do some simple syntax anomaly tests
  |#
  

  # apply parsed command line args over existing config
  # progress log, results override if present
  # test sources add to the list of sources
  # all modules filter overrides existing default
  # module filters are or'd together, and then anded with the existing filters
  # same with block and test predicate filters


end
