include concurrency
import concurrency-internals as ci
include either
import from _internals:
  haskell-error
end

check "exit value of thread":

  fun f():
    {exit:123}
  end

  h = spawn(f)

  wait(h) is {exit:123}

  h1 = spawn(f)

  wait-either(h1) is right({exit:123})

end

check "error exit value of thread":

  fun f():
    raise({exit:123})
  end

  # use no link, because if a linked spawned thread (the default)
  # exits with error, it asynchronously exits the thread that spawned it
  h = spawn-nolink(f)

  wait-either(h) is left({exit:123})

  fun shadow f():
    haskell-error("a haskell exception")
  end

  shadow h = spawn-nolink(f)

  r = wait-either(h)
  is-left(r) is true
  string-index-of(r.v, "a haskell exception") is-not -1

end

