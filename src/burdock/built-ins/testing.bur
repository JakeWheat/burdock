provide:
  run-tests,
  run-tests-string,
  run-tests-with-opts,
  format-test-results,
  has-test-failures,
  default-test-opts,
  apply-args-to-opts,
  default-test-run-exe,
  data Test-result,
  data Check-results,
  data Module-check-results,
  data Test-Source,
  data Run-test-opts
end

include _internals
import _internals as _internals
include option
include env

import from lists:
  map,
  filter,
  not-elem,
  foldl
end

run-tests-with-opts = ffi-function("run-tests-with-opts")

format-test-results = ffi-function("format-test-results")

data Test-result:
  | test-pass(name)
  | test-fail(name,msg)
end

data Check-results:
  | check-results(block-name, results)
end

data Module-check-results:
  | module-check-results(module-name, mcheck-results)
end

data Test-Source:
  | file-test(file-name)
  | source-test(file-name, source)
end

data Run-test-opts:
  | run-test-opts(test-sources, # :: Test-Source
                  show-progress-log, # :: Boolean,
                  test-run-predicate, # :: Option<(module-name :: String,
                                      #       check-block-name :: Option<String>,
                                      #       test-predicate-name :: Option<String>)
                                      #       -> Boolean>,
                  hide-successes, # :: Boolean,
                  print-results) # :: Boolean)
end

default-test-opts = run-test-opts([list:], false, none, false, false)


#|
extract the following:
--show-successes / --hide-successes
--print-results / --no-print-results
--show-progress-log / --hide-progress-log
--match-modules
--match-check-blocks
--match-predicates

TODO: stop processing args if get to --
if before --, and it starts with - and don't recognise, error
|#


fun apply-args-to-opts(opts, args):
  fun parse-args(es):
    fun f(shadow opts,fs,ms,cbs,tps,shadow es):
      cases es:
        | empty => {opts; ms; cbs; tps; fs}
        | link("--", shadow es) =>
          f(opts,fs,ms,cbs,tps,es)
        | link("--hide-successes", shadow es) =>
          opts1 = link({(x): x.{hide-successes:true}}, opts)
          f(opts1,fs,ms,cbs,tps,es)
        | link("--show-successes", shadow es) =>
          opts1 = link({(x): x.{hide-successes:false}}, opts)
          f(opts1,fs,ms,cbs,tps,es)
        | link("--no-print-results", shadow es) =>
          opts1 = link({(x): x.{print-results:false}}, opts)
          f(opts1,fs,ms,cbs,tps,es)
        | link("--hide-progress-log", shadow es) =>
          opts1 = link({(x): x.{show-progress-log:false}}, opts)
          f(opts1,fs,ms,cbs,tps,es)
        | link("--module-matches", link(mm, shadow es)) =>
          f(opts,fs,link(mm,ms),cbs,tps,es)
        | link("--check-block-matches", link(cbn, shadow es)) =>
          f(opts,fs,ms,link(cbn,cbs),tps,es)
        | link("--test-predicate-matches", link(tp, shadow es)) =>
          f(opts,fs,ms,cbs,link(tp,tps),es)
        | link(x,shadow es) =>
          f(opts,link(x,fs),ms,cbs,tps,es)
      end
    end
    f(empty,empty,empty,empty,empty,es)
  end
  {opts-mods; module-matches; check-block-matches; test-pred-matches;srcs} = parse-args(args)
  shadow opts = opts.{test-sources:map(file-test(_), srcs) + opts.test-sources}
  shadow opts = foldl({(x,y): y(x)}, opts, opts-mods)

  fun any(prd, lst):
    cases lst:
      | empty => false
      | link(x,xs) =>
        if prd(x): true
        else: any(prd,xs)
        end
    end
  end
  
  fun match-any(nm, matches):
    if is-empty(matches): true
    else:
      any({(mnm): string-index-of(nm, mnm) >=0 }, matches)
    end
  end
  
  fun pred(module-name, check-block-name, test-predicate-name):
  
    cases {module-name;check-block-name;test-predicate-name}:
      | {mn;none;none} => match-any(mn, module-matches)
      | {mn;some(cbn);none} => match-any(mn + "/" + cbn, check-block-matches)
      | {mn;some(cbn);some(trp)} => match-any(mn + "/" + cbn + "/" + trp, test-pred-matches)
    end
  end
  
  shadow opts = opts.{test-run-predicate:pred}

  opts

end

fun has-test-failures(lst):
  fun check-trs(trs):
    cases trs:
      | empty => false
      | link(test-pass(_), tl) => check-trs(tl)
      | link(test-fail(_,_),_) => true
    end
  end

  fun check-cbs(cbs):
    cases cbs:
      | empty => false
      | link(h,tl) =>
        if check-trs(h.results):
          true
        else:
          check-cbs(tl)
        end
    end
  end

  fun check-mcrs(mcrs):
    cases mcrs:
      | empty => false
      | link(h, tl) =>
        if check-cbs(h.mcheck-results):
          true
        else:
          check-mcrs(tl)
        end
     end
  end

  check-mcrs(lst)
end

fun run-tests(fn):
  run-tests-with-opts(default-test-opts.{test-sources:[list: file-test(fn)]})
end

fun run-tests-string(fn,src):
  run-tests-with-opts(default-test-opts.{test-sources:[list: source-test(fn, src)]})
end

fun default-test-run-exe(opts-mods):

  opts = default-test-opts.{show-progress-log:true,
                            print-results:true,
                            hide-successes:true}
  shadow opts = foldl({(x,y): y(x)}, opts, opts-mods)

  args = get-args()
  shadow opts = apply-args-to-opts(opts, args.rest)

  ts = run-tests-with-opts(opts)

  when has-test-failures(ts):
    _internals.sysexit(1)
  end
end
