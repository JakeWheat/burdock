
provide:
  
  my-do-is-test,
  my-do-is-not-test,
  my-do-bpred-test,
  #data TestResult
  test-pass,
  test-fail,
  log-and-print-result

end

##################
# testing

data TestResult:
  | test-pass(name)
  | test-fail(name,msg)
end

my-do-bpred-test = lam(bpredf, pred-string, anti-pred-string, m1, m2, ev1, ev2):
  name = m1 + " " + pred-string + " " + m2

  safe-compare = lam(v1,v2):
    res = run-task(bpredf(v1,v2))
    #print(v1)
    #print(v2)
    #print(bpredf(v1,v2))
    cases res:
      | left(e) => test-fail(name, torepr-debug(v1) + " " + pred-string + " " + torepr-debug(v2) + " raised " + torepr-debug(e))
      | right(true) => test-pass(name)
      | right(false) => test-fail(name, torepr-debug(v1) + "\n" + anti-pred-string + "\n" + torepr-debug(v2))
    end
  end

  cases {ev1;ev2}:
    | {left(e1); left(e2)} =>
      test-fail(name, "LHS error: " + torepr-debug(e1) + "\nRHS error: " + torepr-debug(e2))
    | {left(e1); right(_)} =>
      test-fail(name, "LHS error: " + torepr-debug(e1))
    | {right(_); left(e2)} =>
      test-fail(name, "RHS error: " + torepr-debug(e2))
    | {right(v1); right(v2)} => safe-compare(v1,v2)
  end
       
end

format-test = lam(t):
  cases t:
    | test-pass(name) => "PASS " + name
    | test-fail(name,msg) => "FAIL " + name + "\n" + indent(msg)
  end
end

log-result = lam(t):
  cases t:
    | test-pass(_) => add-test-pass()
    | test-fail(_,_) => add-test-fail()
  end
end

fun log-and-print-result(r):
  log-result(r)
  print(format-test(r))
end

my-do-is-test = lam(m1,m2,v1,v2):
  r = my-do-bpred-test(lam(a,b): a == b end, "is", "!=", m1, m2, v1, v2)
  log-and-print-result(r)
end

my-do-is-not-test = lam(m1,m2,v1,v2):
  r = my-do-bpred-test(lam(a,b): not(a == b) end, "is-not", "==", m1, m2, v1, v2)
  log-and-print-result(r)
end
