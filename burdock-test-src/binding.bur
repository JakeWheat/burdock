
check "literal binding":

  fun fib(n):
    cases n:
      | 0 => 1
      | 1 => 1
      | else => fib(n - 1) + fib(n - 2)
    end
  end

  fib(0) is 1
  fib(1) is 1
  fib(2) is 2
  fib(3) is 3
  fib(4) is 5
  fib(5) is 8


  fun is-dave(x):
    cases x:
      | "dave" => true
      | else => false
    end
  end

  is-dave("dave") is true
  is-dave("barry") is false

end


  # what could it match?
  check "simple binding":
    fun t1(a):
      cases a:
        | b => "matched 1 " + torepr(b)
        | else => "matched 2 " + torepr(a)
      end
    end
    t1(1) is "matched 1 1"
    t1(true) is "matched 1 true"
    t1('test') is 'matched 1 "test"'
    # todo: check parsing \" in strings
  
    a = 5
    a is 5
    
  end

  check "simple shadow":
    a = 3
    a is 3
    shadow a = 4
    a is 4
    #a = 5
    #a is 5
    b = 6
    cases b:
      | shadow a => a is 6
    end
  end


  check "tuple matching":
    fun t2(arg):
      cases arg:
        | {x} =>
          "matched 1 " + torepr(x)
        | {x;y} =>
          "matched 2 " + torepr(x) + " " + torepr(y)
        | {x;y;z} =>
          "matched 3 " + torepr(x) + " " + torepr(y) + " " + torepr(z)
        | _ => "matched other " + torepr(arg)
      end
    end
    t2({3;'z'}) is 'matched 2 3 "z"'
    t2({true}) is 'matched 1 true'
    t2({1;2;3}) is 'matched 3 1 2 3'
    t2('test') is 'matched other "test"'
  
    fun t3(arg):
      cases arg:
        | {x;y;z} =>
          "matched 3 " + torepr(x) + " " + torepr(y) + " " + torepr(z)
        | {x;y} =>
          "matched 2 " + torepr(x) + " " + torepr(y)
        | {x} =>
          "matched 1 " + torepr(x)
        | _ => "matched other " + torepr(arg)
      end
    end
    t3({3;'z'}) is 'matched 2 3 "z"'
    t3({true}) is 'matched 1 true'
    t3({1;2;3}) is 'matched 3 1 2 3'
    t3('test') is 'matched other "test"'
    
    {x;y} = {3;true}
    x is 3
    y is true
  
  end

  data MyOption:
    | my-none
    | my-some(a)
  end
  
  fun f1(a):
    cases a:
      | my-none => "none"
      | my-some(b) => "some" + torepr(b)
    end
  end
  
  check "variant matching":
    f1(my-none) is "none"
    f1(my-some(1)) is "some1"
    f1(my-some(true)) is "sometrue"
  end
  
  # todo: show variants from different data types in the same cases
  # show cases with explicit type

  fun f2(a):
    cases a:
      | _ :: Number => "matched 1 " + torepr(a)
      | _ => "matched 2 " + torepr(a)
    end
  end
  
  check "typed pattern":
    f2(1) is "matched 1 1"
    # todo: bug? the match with Number raises an exception
    # instead of the match branch failing
    # problem is, which behaviour do you want, do you expect?
    # the wrong type failing the match and going to the next branch
    # is useful
    #f2(true) is "matched 2 true"
  end


  fun f3(a):
    cases a:
      | 1 => "matched 1 " + torepr(a)
      | _ => "matched 2 " + torepr(a)
    end
  end
  
  check "number literal":
    f3(1) is "matched 1 1"
    f3(2) is "matched 2 2"
  end


  fun f4(a):
    cases a:
      | _ as b => "matched 1 " + torepr(b)
    end
  end
  
  check "wildcard":
    f4(1) is "matched 1 1"
    f4(true) is "matched 1 true"
  end


  fun f5(a):
    cases a:
      | 1 => "matched 1"
      | 2 => "matched 2"
      | _ => "matched 3 " + torepr(a)
    end
  end
  
  check "number literal":
    f5(1) is "matched 1"
    f5(2) is "matched 2"
    f5(true) is "matched 3 true"
  end

  fun f6(a):
    cases a:
      | 'test' => "matched 1"
      | 'something' => "matched 2"
      | _ => "matched 3 " + torepr(a)
    end
  end
  
  check "string literal":
    f6('test') is "matched 1"
    f6('something') is "matched 2"
    f6('else') is 'matched 3 "else"'
  end

   fun f7(a):
     cases a:
       | link(x,link(y,empty)) => "matched 2 " + torepr(x) + " " + torepr(y)
       | link(x,empty) => "matched 1 " + torepr(x)
       | link(_,_) => "matched many"
       | empty => "matched 0"
       | else => "matched nothing"
     end
   end
  
   check:
     f7(1) is "matched nothing"
     f7([list:]) is "matched 0"
     f7([list: 1]) is "matched 1 1"
     f7([list: 1,2]) is "matched 2 1 2"
     f7([list: 1,2,3]) is "matched many"
   end
  
   fun f8(a):
     cases a:
       | empty => "matched 0"
       | link(x,empty) => "matched 1 " + torepr(x)
       | link(x,link(y,empty)) => "matched 2 " + torepr(x) + " " + torepr(y)
       | link(_,_) => "matched many"
       | else => "matched nothing"
     end
   end
  
   check:
     f8(1) is "matched nothing"
     f8([list:]) is "matched 0"
     f8([list: 1]) is "matched 1 1"
     f8([list: 1,2]) is "matched 2 1 2"
     f8([list: 1,2,3]) is "matched many"
   end

  check "as binding":
    fun f9(a):
      cases a:
        | link(_,empty) as b => "one element: " + torepr(b)
        | else => "else " + torepr(a)
      end
    end
    f9(empty) is "else empty"
    f9([list:1]) is "one element: link(1, empty)"
    f9([list:1,2]) is "else link(1, link(2, empty))"
  end


  check "tuple binding":
    {x; y} = {1; 2}
    x is 1
    y is 2
    cases {1;2}:
      | {z;w} => "two " + torepr(z) + " " + torepr(w)
    end is "two 1 2"
  end
  
  check "nested tuple binding":
    block:
      {{w; x} as wx; {y; z} as yz} as wxyz = {{5; true}; {"hello"; 4}}
      w is 5
      x is true
      y is "hello"
      z is 4
      wx is {5; true}
      yz is {"hello"; 4}
      wxyz is {wx; yz}
    end
  
    block:
      cases {{5; true}; {"hello"; 4}}:
        | {{w; x} as wx; {y; z} as yz} as wxyz =>
          w is 5
          x is true
          y is "hello"
          z is 4
          wx is {5; true}
          yz is {"hello"; 4}
          wxyz is {wx; yz}
      end
    end
  end
