
#|

data List:
   | empty
   | link(first,rest)
end

|#

check:
  empty is [List:]
  link(1, empty) is [List: 1]
  link(1, link(2, empty)) is [List: 1,2]

end

check:
  l1 = [List: 1]
  mt = empty
  is-empty(mt) is true
  is-empty(l1) is false
  is-link(mt) is false
  is-link(l1) is true

  is-List(l1) is true
  is-List(mt) is true
end

check:
  l1 = [List: 1,2,3]
  l1.first is 1
  l1.rest is [List: 2,3]
end

check:
  list1 = [List: 2,3]
  list2 = link(1, list1)
  list2 is [List: 1,2,3]

  [List: 1,2,3].first is 1
  [List: 1,2,3].rest  is [List: 2,3]
end

check:
  empty is [List:]
  link(1, empty) is [List: 1]
  link(1, link(2, empty)) is [List: 1,2]
  link(empty, link(empty, [List: ])) is [List: [List:],[List:]]
end

check:
  x = [List:1]
  cases x:
    | empty => true
    | else => false
  end is false

  shadow x = [List:]
  cases x:
    | empty => true
    | else => false
  end is true

  shadow x = [List:1]
  cases x:
    | link(a,b) => block:
        a is 1
        b is empty
        nothing
      end
    | else => nothing
  end
  
end


fun my-is-empty(l):
  cases l:
    | empty => true
    | else => false
  end
end

fun length(l):
  cases l:
    | empty => 0
    | link(f, r) => 1 + length(r)
  end
end

check:
  l1 = empty
  l2 = [List: 1,2,3]
  my-is-empty(l1) is true
  my-is-empty(l2) is false

  length(l1) is 0
  length(l2) is 3
end

