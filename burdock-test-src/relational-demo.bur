
include relational

check "from list and equals":

  rel1 = rel-from-list(
    [list:
      {a : 1, b : 'a'},
      {a : 2, b : 'b'},
      {a : 3, b : 'c'}])

  rel1 is rel-from-list(
    [list:
      {b : 'a', a : 1 },
      {a : 3, b : 'c'},
      {a : 2, b : 'b'}])

  rel1 is-not rel-from-list(
    [list:
      {b : 'a', a : 2 },
      {a : 3, b : 'c'},
      {a : 2, b : 'b'}])

end

check "table dee and table dum":
  table-dee is rel-from-list([list: {}])
  table-dum is rel-from-list([list: ])
  table-dee is-not table-dum
end

check "hack parse relation literal":

  x = ```
      a,b,c
      1,2,3
      3,4,5
      ```

  y = ```
    a,b,c
    true,1,1a
    false,3,truea```

  hack-parse-table(x) is rel-from-list([list:
      {a: 1, b: 2, c: 3},
      {a: 3, b: 4, c: 5}
    ])
  hack-parse-table(y) is rel-from-list([list:
      {a: true, b: 1, c: '1a'},
      {a: false, b: 3, c: 'truea'}
    ])
end


check "functional insert, update, delete":

  # insert is just union
  block:
    a = hack-parse-table(
```
a,b
1,2
2,3
```)
    b = hack-parse-table(
```
a,b
3,4
4,5
```)
    r = hack-parse-table(
```
a,b
1,2
2,3
3,4
4,5
```)
    rel-union(a,b) is r
  end

  # functional delete with no condition is too trivial to test
  # might be useful once headers are added

  # functional delete with condition is like where with inverted condition
  block:
    a = hack-parse-table(
```
a,b
1,2
2,3
3,3
3,4
```)
    c = hack-parse-table(
```
a,b
1,2
3,4
```)
  
    rel-delete(a, {(r): r.b == 3}) is c

  end

  # unconditional update
  block:
    a = hack-parse-table(
```
a,b,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    c = hack-parse-table(
```
a,b,c
2,2,10
3,3,11
4,3,12
4,4,13
```)
    # definitely needs some record update syntax
    # this will also help constraint from changing the type
    # update is more or less a combination of project and extend
    # can also be seen as a variation on select
    rel-update(a, {(r): {a: r.a + 1, b:r.b, c:r.c}}, {(_): true})
      is c
  end
  block:
  # conditional update

    a = hack-parse-table(
```
a,b,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    c = hack-parse-table(
```
a,b,c
1,2,10
4,3,11
6,3,12
3,4,13
```)
    rel-update(a, {(r): {a: r.a * 2, b:r.b, c:r.c}}, {(r): r.b == 3})
      is c
  end

  # project, rename, extend, select
  block:
    a = hack-parse-table(
```
a,b,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    c = hack-parse-table(
```
a,c
1,10
2,11
3,12
3,13
```)
    rel-project([list: 'a','c'], a) is c
  end

  block:
    a = hack-parse-table(
```
a,b,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    c = hack-parse-table(
```
a,d,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    rel-rename([list: {'b';'d'}], a) is c
  end

  block:
    a = hack-parse-table(
```
a,b,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    c = hack-parse-table(
```
f,g,c
1,2,10
2,3,11
3,3,12
3,4,13
```)
    rel-rename([list: {'a';'f'}, {'b';'g'}], a) is c
  end


  block:
    a = hack-parse-table(
```
a,b
1,2
2,3
3,3
3,4
```)
    c = hack-parse-table(
```
a,b,c,d
1,2,2,3
2,3,6,5
3,3,9,6
3,4,12,7
```)
    rel-extend(a, {(r): {c: r.a * r.b, d: r.a + r.b}}) is c
  end

  block:
    a = hack-parse-table(
```
a,b
1,2
2,3
3,3
3,4
```)
    c = hack-parse-table(
```
a,b,c,d
1,4,2,3
2,5,6,5
3,5,9,6
3,6,12,7
```)
    rel-select(a, {(r): {a: r.a, b: r.b + 2, c: r.a * r.b, d: r.a + r.b}}) is c
  end

  block:
    a = hack-parse-table(
```
a,b
1,2
2,3
3,3
3,4
```)
    c = hack-parse-table(
```
a,b
2,3
3,3
```)
  
    rel-where(a, {(r): r.b == 3}) is c

  end


  block:
  # join
    a = hack-parse-table(
```
a,b
1,2
2,3
3,3
3,4
```)
    b = hack-parse-table(
```
a,c
2,3
3,3
```)
    c = hack-parse-table(
```
a,b,c
2,3,3
3,3,3
3,4,3
```)
    
    rel-join(a, b) is c
  end
  # antijoin
  block:
  # join
    a = hack-parse-table(
```
a,b
1,2
2,3
3,3
3,4
4,5
```)
    b = hack-parse-table(
```
a
2
3
```)
    c = hack-parse-table(
```
a,b
1,2
4,5
```)
    
    rel-minus(a, b) is c
  end

  # group

  # ungroup

  # agg demo
  
end
